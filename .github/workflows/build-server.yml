name: Build server and wheels

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag to build (e.g., v1.11.3)'
        required: false
        type: string
      create_release:
        description: 'Create release artifacts'
        required: false
        type: boolean
        default: false
  push:
    branches:
      - main
    paths: ['.github/workflows/build.yml', 'llama-cpp-server-py-core/**']
  pull_request:
    paths: ['.github/workflows/build.yml', 'llama-cpp-server-py-core/**']
  release:
    types: [published]

env:
  LLAMA_LOG_COLORS: 1
  LLAMA_LOG_PREFIX: 1
  LLAMA_LOG_TIMESTAMPS: 1
  LLAMA_LOG_VERBOSITY: 10

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build-wheels:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10.14", "3.11.8", "3.12.2"]
        arch: [amd64, arm64]
        cuda: [false]

    steps:
      - name: Clone
        uses: actions/checkout@v4
        with:
          submodules: "recursive"
          ref: ${{ github.event.inputs.version || github.ref }}
          fetch-depth: 0
          fetch-tags: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.arch }}

      - name: Create build script
        run: |
          cat > build.sh << 'EOF'
          #!/bin/bash
          set -e

          # Install system dependencies
          apt-get update && apt-get install -y \
            build-essential \
            cmake \
            git \
            curl \
            python3-dev \
            python3-pip \
            ninja-build

          # Install Rye
          curl -sSf https://rye.astral.sh/get | bash
          echo 'source "$HOME/.rye/env"' >> ~/.bashrc
          source "$HOME/.rye/env"

          # Configure project
          cd /workspace/llama-cpp-server-py-core
          echo "$PYTHON_VERSION" > .python-version
          rye pin "$PYTHON_VERSION"
          rye sync --no-dev

          # Set build environment variables
          export CMAKE_ARGS="-DLLAMA_FATAL_WARNINGS=OFF -DCMAKE_BUILD_TYPE=Release"
          if [ "$BUILD_CUDA" = "true" ]; then
            export CMAKE_ARGS="$CMAKE_ARGS -DLLAMA_CUDA=ON"
            export SKBUILD_CMAKE_ARGS="$CMAKE_ARGS"
          fi

          # Build wheel
          WHEEL_PLATFORM="${PLATFORM}" rye build --verbose

          # Fix permissions
          chmod -R 777 /workspace/dist
          EOF
          chmod +x build.sh

      - name: Build wheel
        run: |
          DOCKER_IMAGE=${{ matrix.cuda && 'nvidia/cuda:12.6.2-devel-ubuntu24.04' || 'ubuntu:24.04' }}
          PLATFORM=${{ matrix.arch == 'amd64' && 'manylinux_2_31_x86_64' || 'manylinux_2_31_aarch64' }}
          
          docker run --rm \
            --platform linux/${{ matrix.arch }} \
            -v ${{ github.workspace }}:/workspace \
            -v ${{ github.workspace }}/build.sh:/build.sh \
            -e PYTHON_VERSION=${{ matrix.python-version }} \
            -e BUILD_CUDA=${{ matrix.cuda }} \
            -e PLATFORM=${PLATFORM} \
            ${DOCKER_IMAGE} \
            /build.sh

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: dist-wheels-py${{ matrix.python-version }}-${{ matrix.arch }}${{ matrix.cuda && '-cuda' || '' }}
          path: dist/*.whl

      - name: Upload server binary
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/main' ) || github.event.inputs.create_release == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          path: llama-cpp-server-py-core/build/temp.*/llama-cpp/build/bin/llama-server
          name: llama-server${{ matrix.cuda && '-cuda' || '' }}-${{ matrix.arch }}

  create-release:
    needs: build-wheels
    if: ${{ github.event.inputs.create_release == 'true' || github.event_name == 'release' }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Determine tag name
        id: tag
        shell: bash
        run: |
          BUILD_NUMBER="$(git rev-list --count HEAD)"
          SHORT_HASH="$(git rev-parse --short=7 HEAD)"
          if [[ "${{ env.BRANCH_NAME }}" == "main" ]]; then
            echo "name=b${BUILD_NUMBER}" >> $GITHUB_OUTPUT
          else
            SAFE_NAME=$(echo "${{ env.BRANCH_NAME }}" | tr '/' '-')
            echo "name=${SAFE_NAME}-b${BUILD_NUMBER}-${SHORT_HASH}" >> $GITHUB_OUTPUT
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release
        if: ${{ github.event.inputs.create_release == 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.name }}
          files: artifacts/**/*
          draft: true
          prerelease: true